name: Deploy to Azure Container Apps

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  REGISTRY_NAME: avaresfocalboardacr
  CONTAINER_APP_NAME: focalboard
  RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
  LOCATION: eastus

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      
      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Create ACR if it doesn't exist
        run: |
          az acr show --name ${{ env.REGISTRY_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} || \
          az acr create --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.REGISTRY_NAME }} --sku Basic --admin-enabled true
      
      - name: Get ACR login credentials
        id: acr-creds
        run: |
          ACR_USERNAME=$(az acr credential show --name ${{ env.REGISTRY_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query username -o tsv)
          ACR_PASSWORD=$(az acr credential show --name ${{ env.REGISTRY_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query "passwords[0].value" -o tsv)
          echo "::set-output name=username::$ACR_USERNAME"
          echo "::set-output name=password::$ACR_PASSWORD"
      
      - name: Login to ACR
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY_NAME }}.azurecr.io
          username: ${{ steps.acr-creds.outputs.username }}
          password: ${{ steps.acr-creds.outputs.password }}
      
      # Ensure front-end assets are built properly
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16.x'
          
      - name: Build frontend assets
        run: |
          cd webapp
          npm ci
          npm run pack
          mkdir -p ../pack
          cp -r ./pack/* ../pack/
          echo "Frontend assets built successfully"
          
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          tags: ${{ env.REGISTRY_NAME }}.azurecr.io/focalboard:${{ github.sha }}
          cache-from: type=registry,ref=${{ env.REGISTRY_NAME }}.azurecr.io/focalboard:latest
          cache-to: type=inline
          build-args: |
            SKIP_TESTS=true
      
      - name: Create or update Container App Environment
        run: |
          az extension add --name containerapp --upgrade
          # Check if Azure provider Microsoft.App is registered
          echo "Checking if Microsoft.App provider is registered..."
          PROVIDER_STATE=$(az provider show --namespace Microsoft.App --query "registrationState" -o tsv 2>/dev/null || echo "NotRegistered")
          
          if [ "$PROVIDER_STATE" != "Registered" ]; then
            echo "WARNING: Microsoft.App provider is not registered. Container Apps require this provider."
            echo "Please ask your Azure administrator to run: az provider register --namespace Microsoft.App"
            echo "Proceeding anyway in case the environment already exists..."
          fi
          
          # Try to use existing Container App Environment
          if az containerapp env show --name focalboard-env --resource-group ${{ env.RESOURCE_GROUP }} &>/dev/null; then
            echo "Container App Environment already exists."
          else
            echo "Creating Container App Environment..."
            az containerapp env create \
            --name focalboard-env \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --location ${{ env.LOCATION }}
          fi
      
      - name: Create persistent volume
        run: |
          # Create storage account if it doesn't exist
          az storage account show --name avaresfbstorage --resource-group ${{ env.RESOURCE_GROUP }} || \
          az storage account create \
            --name avaresfbstorage \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --location ${{ env.LOCATION }} \
            --sku Standard_LRS
          
          # Create file share if it doesn't exist
          az storage share show --name focalboard-data --account-name avaresfbstorage || \
          az storage share create \
            --name focalboard-data \
            --account-name avaresfbstorage
          
          # Get storage key
          STORAGE_KEY=$(az storage account keys list --account-name avaresfbstorage --resource-group ${{ env.RESOURCE_GROUP }} --query "[0].value" -o tsv)
          echo "::set-output name=storage_key::$STORAGE_KEY"
      
      - name: Add Storage to Container App Environment
        run: |
          # Get storage key again
          STORAGE_KEY=$(az storage account keys list --account-name avaresfbstorage --resource-group ${{ env.RESOURCE_GROUP }} --query "[0].value" -o tsv)
          
          # Add storage definition to Container App Environment
          echo "Adding Azure Files storage to Container App Environment..."
          az containerapp env storage set \
            --name focalboard-env \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --storage-name focalboard-data-storage \
            --storage-type AzureFile \
            --azure-file-account-name avaresfbstorage \
            --azure-file-account-key "$STORAGE_KEY" \
            --azure-file-share-name focalboard-data \
            --access-mode ReadWrite
          
      - name: Deploy to Container App
        run: |
          # Check if container app exists
          APP_EXISTS=$(az containerapp list --resource-group ${{ env.RESOURCE_GROUP }} --query "[?name=='${{ env.CONTAINER_APP_NAME }}'].name" -o tsv)

          if [ -z "$APP_EXISTS" ]; then
            echo "Creating Container App..."
            az containerapp create \
              --name ${{ env.CONTAINER_APP_NAME }} \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --environment focalboard-env \
              --image ${{ env.REGISTRY_NAME }}.azurecr.io/focalboard:${{ github.sha }} \
              --registry-server ${{ env.REGISTRY_NAME }}.azurecr.io \
              --registry-username ${{ env.REGISTRY_NAME }} \
              --registry-password ${{ steps.acr-creds.outputs.password }} \
              --target-port 8000 \
              --ingress external \
              --min-replicas 1 \
              --max-replicas 1 \
              --cpu 0.5 \
              --memory 1.0Gi
          else
            echo "Updating Container App..."
            az containerapp update \
              --name ${{ env.CONTAINER_APP_NAME }} \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --image ${{ env.REGISTRY_NAME }}.azurecr.io/focalboard:${{ github.sha }}
          fi
          
          echo "Configuring volume mounts using YAML approach..."
          
          # Export the container app configuration to YAML
          echo "Ensuring jq and PyYAML are installed for YAML/JSON processing..."
          if ! command -v jq &> /dev/null; then
            echo "Installing jq..."
            apt-get update && apt-get install -y jq
          else
            echo "jq is already installed"
          fi
          
          echo "Installing PyYAML for YAML<->JSON conversion..."
          pip install pyyaml
          
          echo "Exporting current Container App configuration to YAML..."
          az containerapp show \
            --name ${{ env.CONTAINER_APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --output yaml > app_config.yaml
          
          # Create a backup of the original configuration
          cp app_config.yaml app_config_original.yaml
          
          # Use a simpler approach with cat to create volume configuration files
          echo "Creating volume configuration files..."
          
          # Create volume config file
          cat > volume_patch.yaml << 'EOL'
          properties:
            template:
              volumes:
              - name: focalboard-data-volume
                storageType: AzureFile
                storageName: focalboard-data-storage
              containers:
              - name: focalboard
                volumeMounts:
                - volumeName: focalboard-data-volume
                  mountPath: "/opt/focalboard/data"
          EOL
          
          # Show the volume configuration
          echo "Volume configuration to be applied:"
          cat volume_patch.yaml
          
          # Convert YAML to JSON, merge, then convert back to YAML
          echo "Converting YAML to JSON for merging..."
          python -c "import json, yaml, sys; json.dump(yaml.safe_load(open('app_config.yaml')), open('app_config.json', 'w'))"
          python -c "import json, yaml, sys; json.dump(yaml.safe_load(open('volume_patch.yaml')), open('volume_patch.json', 'w'))"
          
          # Use jq to merge JSON files
          echo "Merging volume configuration with existing app config..."
          jq -s '.[0] * .[1]' app_config.json volume_patch.json > updated_config.json
          
          # Convert merged JSON back to YAML
          python -c "import json, yaml, sys; yaml.dump(json.load(open('updated_config.json')), open('updated_config.yaml', 'w'))"
          
          # Show the changes
          echo "Showing diff between original and updated config:"
          diff app_config.yaml updated_config.yaml || true
          
          # Update the container app with the new configuration
          echo "Updating Container App with volume configuration..."
          az containerapp update \
            --name ${{ env.CONTAINER_APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --yaml updated_config.yaml
          
      
      - name: Get Container App URL
        id: app-url
        run: |
          APP_URL=$(az containerapp show --name ${{ env.CONTAINER_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query properties.configuration.ingress.fqdn -o tsv)
          echo "::set-output name=url::https://$APP_URL"
          echo "Focalboard is now deployed at: https://$APP_URL"
